@page "/status"
@inject CrossPubInsightUI.Services.CpiaApiService ApiService

<PageTitle>System Status - CPIA</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">üìä System Status</h1>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">API Health</h5>
                        </div>
                        <div class="card-body">
                            @if (healthData == null && !isLoading)
                            {
                                <div class="text-center">
                                    <button class="btn btn-primary" @onclick="RefreshHealth">
                                        ÔøΩÔøΩ Check Health
                                    </button>
                                </div>
                            }
                            else if (isLoading)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Checking API status...</p>
                                </div>
                            }
                            else if (healthData != null)
                            {
                                <div class="status-item">
                                    <span class="status-label">Status:</span>
                                    <span class="badge @GetStatusBadgeClass(healthData.Status)">
                                        @healthData.Status.ToUpper()
                                    </span>
                                </div>
                                <div class="status-item">
                                    <span class="status-label">Message:</span>
                                    <span>@healthData.Message</span>
                                </div>
                                <div class="status-item">
                                    <span class="status-label">Last Check:</span>
                                    <span>@healthData.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                </div>
                                
                                <div class="mt-3">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshHealth">
                                        üîÑ Refresh
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-danger">
                                    <strong>‚ùå API Unavailable</strong><br/>
                                    Unable to connect to the CPIA backend API.
                                </div>
                                <button class="btn btn-outline-primary" @onclick="RefreshHealth">
                                    üîÑ Retry
                                </button>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">Detailed Health</h5>
                        </div>
                        <div class="card-body">
                            @if (detailedHealthData == null)
                            {
                                <div class="text-center">
                                    <button class="btn btn-primary" @onclick="RefreshDetailedHealth">
                                        üîç Check Detailed Health
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="status-item">
                                    <span class="status-label">Overall Status:</span>
                                    <span class="badge @GetStatusBadgeClass(detailedHealthData.OverallStatus)">
                                        @detailedHealthData.OverallStatus.ToUpper()
                                    </span>
                                </div>
                                
                                <div class="mt-3">
                                    <h6>Component Checks:</h6>
                                    @foreach (var check in detailedHealthData.Checks)
                                    {
                                        <div class="small-status-item">
                                            <span class="component-name">@check.Key:</span>
                                            <span class="component-status">@check.Value.ToString()</span>
                                        </div>
                                    }
                                </div>
                                
                                <div class="mt-3">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshDetailedHealth">
                                        üîÑ Refresh
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">System Metrics</h5>
                        </div>
                        <div class="card-body">
                            @if (metricsData == null)
                            {
                                <div class="text-center">
                                    <button class="btn btn-primary" @onclick="RefreshMetrics">
                                        üìà Load Metrics
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6>System Metrics</h6>
                                        @foreach (var metric in metricsData.System)
                                        {
                                            <div class="metric-item">
                                                <span class="metric-label">@metric.Key:</span>
                                                <span class="metric-value">@metric.Value.ToString()</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-md-6">
                                        <h6>Application Metrics</h6>
                                        @foreach (var metric in metricsData.Application)
                                        {
                                            <div class="metric-item">
                                                <span class="metric-label">@metric.Key:</span>
                                                <span class="metric-value">@metric.Value.ToString()</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="mt-3">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshMetrics">
                                        üîÑ Refresh
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HealthResponse? healthData;
    private MonitoringHealthResponse? detailedHealthData;
    private MonitoringMetricsResponse? metricsData;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshHealth();
    }

    private async Task RefreshHealth()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            healthData = await ApiService.CheckHealthAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking health: {ex.Message}");
            healthData = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDetailedHealth()
    {
        try
        {
            detailedHealthData = await ApiService.GetMonitoringHealthAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking detailed health: {ex.Message}");
        }
    }

    private async Task RefreshMetrics()
    {
        try
        {
            metricsData = await ApiService.GetMonitoringMetricsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading metrics: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "healthy" or "ok" or "success" => "bg-success",
            "unhealthy" or "error" or "failed" => "bg-danger",
            "degraded" or "warning" => "bg-warning",
            _ => "bg-secondary"
        };
    }
}

<style>
    .status-item {
        margin-bottom: 0.75rem;
    }
    
    .status-label {
        font-weight: 600;
        margin-right: 0.5rem;
    }
    
    .small-status-item {
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
    }
    
    .component-name {
        font-weight: 500;
        margin-right: 0.5rem;
    }
    
    .metric-item {
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
    }
    
    .metric-label {
        font-weight: 500;
        margin-right: 0.5rem;
    }
    
    .metric-value {
        font-family: 'Courier New', monospace;
        background-color: #f8f9fa;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
    }
</style>
